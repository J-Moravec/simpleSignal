% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorize.r
\name{colorize}
\alias{colorize}
\title{Colorize text}
\usage{
colorize(text, color = "red", style = NULL, code = NULL)
}
\arguments{
\item{text}{text that you want colorize}

\item{color}{one of colors from \code{.colors}, see simpleSignal::.colors}

\item{style}{\code{crayon} class object with style from \code{crayon} package}

\item{code}{your own color code (number for font type and color)}
}
\value{
text with tags which will colorize text if printed onto terminal
}
\description{
If your terminal supports colors, this will colorize your message!
}
\details{
This function utilize some hidden variables: \code{.colorize} which is
initialized on startup with \code{crayon::has_color} and will inform this
function if terminal does support colors, and \code{.colors} which contain
set of predefined colors and their codes.

Coloring text in terminals works in following way:
First prefix that enable coloring: \code{\\033[}
Type of text (bold, italics, underlined...) and code for color, for example:
\code{0;34} is blue and \code{1;34} is bold blue. This coding is rather
specific for your terminal. This code is followed by \code{m}.

Finally, color is reseted into default color by following code:
\code{\\033[0m}.

You can use on of the predefined colors from \code{.color} variable, use
predefined or custom created style from \code{crayon} package or
provide your own color code using \code{code} argument.
}
\examples{
simple_text = colorize("I am a simple text.", color="light blue")

# Prints text with coloring tags:
print(simple_text)

# If your terminal supports colors, prints colored text:
cat(simple_text, "\\n")

# You can provide your own color code and experiment
colorize("I am bold and blue", code="1;34")
colorize("I may have blue background", code="7;34")
colorize("Strike through blue text", code="9;34")

}
